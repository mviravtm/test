{"version":3,"sources":["../source/IDD.js"],"names":["getIDDPrefix","stripIDDPrefix","CAPTURING_DIGIT_PATTERN","RegExp","SINGLE_IDD_PREFIX","country","metadata","countryMetadata","IDDPrefix","defaultIDDPrefix","number","IDDPrefixPattern","search","slice","match","length","matchedGroups"],"mappings":";;;;;QAuBgBA,Y,GAAAA,Y;QAaAC,c,GAAAA,c;;AApChB;;;;AACA;;;;AAEA,IAAMC,0BAA0B,IAAIC,MAAJ,CAAW,8BAAsB,IAAjC,CAAhC;;AAEA;;;;;;;;;AASA,IAAMC,oBAAoB,sCAA1B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACO,SAASJ,YAAT,CAAsBK,OAAtB,EAA+BC,QAA/B,EACP;AACC,KAAMC,kBAAkB,uBAAaD,QAAb,CAAxB;AACAC,iBAAgBF,OAAhB,CAAwBA,OAAxB;;AAEA,KAAI,8BAAiBE,gBAAgBC,SAAhB,EAAjB,EAA8CJ,iBAA9C,CAAJ,EACA;AACC,SAAOG,gBAAgBC,SAAhB,EAAP;AACA;;AAED,QAAOD,gBAAgBE,gBAAhB,EAAP;AACA;;AAEM,SAASR,cAAT,CAAwBS,MAAxB,EAAgCL,OAAhC,EAAyCC,QAAzC,EACP;AACC,KAAI,CAACD,OAAL,EAAc;AACb;AACA;;AAED;;AAEA,KAAME,kBAAkB,uBAAaD,QAAb,CAAxB;AACAC,iBAAgBF,OAAhB,CAAwBA,OAAxB;;AAEA,KAAMM,mBAAmB,IAAIR,MAAJ,CAAWI,gBAAgBC,SAAhB,EAAX,CAAzB;;AAEA,KAAIE,OAAOE,MAAP,CAAcD,gBAAd,MAAoC,CAAxC,EAA2C;AAC1C;AACA;;AAED;AACAD,UAASA,OAAOG,KAAP,CAAaH,OAAOI,KAAP,CAAaH,gBAAb,EAA+B,CAA/B,EAAkCI,MAA/C,CAAT;;AAEA;AACA;AACA,KAAMC,gBAAgBN,OAAOI,KAAP,CAAaZ,uBAAb,CAAtB;AACA;AACA,KAAIc,iBAAiBA,cAAc,CAAd,KAAoB,IAArC,IAA6CA,cAAc,CAAd,EAAiBD,MAAjB,GAA0B,CAA3E,EACA;AACC,MAAIC,cAAc,CAAd,MAAqB,GAAzB,EACA;AACC;AACA;AACD;;AAED,QAAON,MAAP;AACA","file":"IDD.js","sourcesContent":["import Metadata from './metadata'\r\nimport { matches_entirely, VALID_DIGITS } from './common'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX = /[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?/\r\n\r\n// export function isSingleIDDPrefix(IDDPrefix)\r\n// {\r\n// \treturn matches_entirely(IDDPrefix, SINGLE_IDD_PREFIX)\r\n// }\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport function getIDDPrefix(country, metadata)\r\n{\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tif (matches_entirely(countryMetadata.IDDPrefix(), SINGLE_IDD_PREFIX))\r\n\t{\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n\r\n\treturn countryMetadata.defaultIDDPrefix()\r\n}\r\n\r\nexport function stripIDDPrefix(number, country, metadata)\r\n{\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if the number is IDD-prefixed.\r\n\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\r\n\t// Some kind of a weird edge case.\r\n\t// No explanation from Google given.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\t/* istanbul ignore next */\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\r\n\t{\r\n\t\tif (matchedGroups[1] === '0')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\treturn number\r\n}"]}