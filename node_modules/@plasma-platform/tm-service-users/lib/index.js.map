{"version":3,"sources":["../source/index.js"],"names":["UsersService","props","getUserById","userId","schema","object","keys","number","integer","required","validate","error","message","url","response","ok","json","updateURL","status","statusText","getProfile","data","getListOfUsersAuthClient","params","token","string","messages","tokenIsNotDefined","options","language","root","key","base","incorrectRequestParameter","any","noRequiredParameter","page","method","headers","Accept","request","users","responseHeaders","totalCount","has","get","pageCount","currentPage","perPage","badRequest","notFound","linkAuthClientToUser","client","body","stringify","requestAuthClientInformation","unlinkAuthClientFromUser","getCitiesByIpAddresses","arrayIps","array","min","items","regex","forEach","item","index","getCitiesByZipAndCountryCode","zip","countryCode","requestString","getCitiesByZipCodes","arrayZips","getCityByIpAddress","ip","getListOfCountries","getListOfSegmentOptions","getListOfSegments","getListOfStateProvinces","addNewUser","login","max","password","subscription","boolean","locale","country","state","segmentOptionId","segmentoption_id","confirmEmail","scope","getLinkForAvatarUpload","file","getListOfUsers","getPaginationMetadata","getSegmentOptionByToken","segmentId","getSegmentOptionByUserId","user_id","segment_id","refreshToken","loginProfile","requestUrl","modifyAuthorizedUserInformation","firstname","lastname","phone","avatar","billingInfo","modifyUserInformationByUserId","stateId","state_id","registerConfirmedUser","birthday","website","company","sex","expand","sendEmail","requestUserEmailExistInformation","email","requestUserInformationByUserId","requestChangeEmail","requestChangePasswordEmail","requestForPasswordResetEmail","requestForRegistrationEmail","requestPublicUsersInformation","ids","setNewEmailUsingEmailToken","setNewPasswordUsingPasswordToken","setNewPasswordUsingResetToken","setSegmentOptionByToken","setSegmentOptionByUserId","signinSignupViaAuthClient","clientName","access_token","subscribeUserToNewsletters","requestUserTokenInformation","user","convert","w","h"],"mappings":"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","file":"index.js","sourcesContent":["import AmazonRename from '@plasma-platform/tm-amazon-rename';\nimport {\n  TMMicroServiceAPI,\n  ErrorServerResponse,\n  ErrorBadRequest,\n  ErrorNotFound,\n} from '@plasma-platform/tm-service-api';\nimport urlencode from 'urlencode';\nimport Joi from 'joi-browser';\n\n/**\n * Users Micro Service API\n *\n * @namespace UsersService\n * @module UsersService\n * @class\n * @exports\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n * @see http://service-users.templatemonster.com/doc/\n */\nexport default class UsersService extends TMMicroServiceAPI {\n  /**\n   * @description constructor of instance\n   * @memberof ServiceProducts\n   * @constructor\n   * @public\n   * @param {string} url - (required) url to service\n   * @param {string} token  - user token\n   * @example const service = new Service(url, token);\n   * @return {object} - service SDK object\n   */\n  constructor(...props) {\n    super(...props);\n    /**\n     * Object with class service messages\n     * @type {object}\n     */\n    this.messages = {\n      tokenIsNotDefined: 'token is not defined',\n      incorrectRequestParameter: 'incorrect request parameter',\n      noRequiredParameter: 'no request parameter',\n      badRequest: 'bad request error',\n      notFound: 'user not found',\n    };\n  }\n\n  /**\n   * @description User - Request public user information by user id\n   * @method getUserById\n   * @async\n   * @public\n   * @memberof UsersService\n   * @param  {number} userId - User ID\n   * @return {user} - User profile\n   * @example <caption>Get user profile by Id</caption>\n   * (async () => {\n   *   const users = new UsersService('//api.templatemonsterdev.com/users/v1/');\n   *   const profile = await users.getUserById(1);\n   * })();\n   */\n  getUserById = async userId => {\n    const schema = Joi.object().keys({\n      userId: Joi.number().integer().required(),\n    });\n    Joi.validate({ userId }, schema, error => {\n      if (error) {\n        throw new ErrorBadRequest(error.message);\n      }\n    });\n    const response = await super.request(`${this.url}users/${userId}/profile`);\n    if (response.ok) {\n      const json = await response.json();\n      return UsersService.updateURL(json);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description Request authenticated user information\n   * @method requestAuthenticatedUserInformation\n   * @async\n   * @public\n   * @memberof UsersService\n   * @param  {object} data - any expand\n   * @return {user} - Current user profile\n   * @example <caption>Get current user profile</caption>\n   * (async () => {\n   *   const users = new UsersService('//api.templatemonsterdev.com/users/v1/');\n   *   const profile = await users.getProfile(true);\n   * })();\n   */\n  getProfile = async (data = {}) => {\n    const schema = Joi.object().keys({\n      data: Joi.object(),\n    });\n    Joi.validate({data}, schema, error => {\n      if (error) {\n        throw new ErrorBadRequest(error.message);\n      }\n    });\n\n    const response = await super.request(`${this.url}users/profile`, {data});\n    if (response.ok) {\n      const json = await response.json();\n      return UsersService.updateURL(json);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * Update url to match our CDN policy\n   * @method updateURLs\n   * @memberof UsersService\n   * @private\n   * @param  {user} user - user profile\n   * @return {user} - user profile with updated urls\n   */\n  static updateURL = user => ({\n      ...user,\n      avatar: AmazonRename.convert(user.avatar, { w: 88, h: 88 }),\n    });\n\n  // AuthClient\n\n  /**\n   * @description AuthClient - Get list of users AuthClient\n   * @memberof UsersService\n   * @method getListOfUsersAuthClient\n   * @async\n   * @public\n   * @param {Object} params\n   * @param {number} params.userId - ID of user\n   * @param {number} params.page - Page number\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.getListOfUsersAuthClient({\n   *     userId: 12940,\n   *     page: 1,\n   *   });\n   * })();\n   * @returns {Promise.<listOfUsers>}\n   */\n  getListOfUsersAuthClient = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        userId: Joi.number().integer().required()\n          .options({\n            language: {\n              root: 'User id error -',\n              key: '{{!label}} ',\n              number: {\n                base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              },\n              any: {\n                required: new ErrorBadRequest(this.messages.noRequiredParameter)\n              }\n            }\n          }),\n        page: Joi.number().integer(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params,\n      },\n    };\n\n    const response = await this.request(`${this.url}user-auth-clients/user/${params.userId}`, options);\n\n    if (response.ok) {\n      const users = await response.json();\n      const responseHeaders = response.headers;\n      const headers = {\n        totalCount: responseHeaders.has('X-Pagination-Total-Count')\n          ? responseHeaders.get('X-Pagination-Total-Count')\n          : \"0\",\n        pageCount: responseHeaders.has('X-Pagination-Page-Count')\n          ? responseHeaders.get('X-Pagination-Page-Count')\n          : \"0\",\n        currentPage: responseHeaders.has('X-Pagination-Current-Page')\n          ? responseHeaders.get('X-Pagination-Current-Page')\n          : \"1\",\n        perPage: responseHeaders.has('X-Pagination-Per-Page')\n          ? responseHeaders.get('X-Pagination-Per-Page')\n          : \"1\",\n      };\n      return { headers, users };\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description AuthClient - Link AuthClient to user\n   * @memberof UsersService\n   * @method linkAuthClientToUser\n   * @async\n   * @public\n   * @param {Object} params\n   * @param {String} params.userId - users id in AuthClient.\n   * @param {String} params.client - AuthClient name(facebook, google etc.).\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.linkAuthClientToUser({\n   *     userId: '12940',\n   *     client: 'John',\n   *   });\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  linkAuthClientToUser = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    const schema = Joi.object().keys({\n      userId: Joi.string()\n        .required()\n        .options({\n          language: {\n            root: 'User id error -',\n            key: '{{!label}} ',\n            string: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n            },\n            any: {\n              required: new ErrorBadRequest(this.messages.noRequiredParameter)\n            }\n          }\n        }),\n      client: Joi.string()\n        .required()\n        .options({\n          language: {\n            root: 'client error -',\n            key: '{{!label}} ',\n            string: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n            },\n            any: {\n              required: new ErrorBadRequest(this.messages.noRequiredParameter)\n            }\n          }\n        }),\n    });\n\n    Joi.validate(\n      params,\n      schema,\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params\n      }),\n    };\n\n    const response = await this.request(`${this.url}user-auth-clients`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description AuthClient - Request AuthClient information\n   * @memberof UsersService\n   * @method requestAuthClientInformation\n   * @async\n   * @public\n   * @param {Number} id - users id in AuthClient.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.requestAuthClientInformation(12940);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  requestAuthClientInformation = async (userId) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      userId,\n      Joi.number().integer().required()\n        .options({\n          language: {\n            root: 'User id error -',\n            key: '{{!label}} ',\n            number: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n            },\n            any: {\n              required: new ErrorBadRequest(this.messages.noRequiredParameter)\n            }\n          }\n        }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {},\n    };\n\n    const response = await this.request(`${this.url}user-auth-clients/${userId}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description AuthClient - Unlink AuthClient from user\n   * @memberof UsersService\n   * @method unlinkAuthClientFromUser\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.id - users AuthClient unique ID.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.unlinkAuthClientFromUser(params);\n   * })();\n   * @returns {Boolean}\n   */\n  unlinkAuthClientFromUser = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        userId: Joi.number().integer().required(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n      }),\n    };\n\n    const response = await this.request(`${this.url}user-auth-clients/${params.userId}`, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  // Cities\n\n  /**\n   * @description Cities - Get cities by ip addresses\n   * @memberof UsersService\n   * @method getCitiesByIpAddresses\n   * @async\n   * @public\n   * @param {array} ips - IP addresses.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getCitiesByIpAddresses([\"192.168.2.59\"]);\n   * })();\n   * @returns {Promise.<cityInfo>}\n   */\n  getCitiesByIpAddresses = async (arrayIps = []) => {\n    Joi.validate(\n      arrayIps,\n      Joi.array()\n        .required()\n        .min(1)\n        .items(\n          Joi.string()\n          .regex(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)\n        )\n        .options({\n          language: {\n            root: 'Ips error -',\n            key: '{{!label}} ',\n            array: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n            },\n            string: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              regex: {\n                base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              },\n            },\n            any: {\n              required: new ErrorBadRequest(this.messages.noRequiredParameter)\n            }\n          }\n        }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const params = {};\n    arrayIps.forEach((item, index) => {\n      params[`ips[${index}]`] = item;\n    });\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const response = await this.request(`${this.url}cities/by-ips`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description Cities - Get cities by zip and country code\n   * @memberof UsersService\n   * @method getCitiesByZipAndCountryCode\n   * @async\n   * @public\n   * @param {String} zip - Zip code.\n   * @param {countryCode} zip - Country code (2 chars, optional).\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getCitiesByZipAndCountryCode({zip:'02070'});\n   * })();\n   * @returns {Promise.<cityInfo>}\n   */\n  getCitiesByZipAndCountryCode = async (params = {}) => {\n    const schema = Joi.object().keys({\n      zip: Joi.string()\n        .required()\n        .regex(/\\d/i)\n        .options({\n          language: {\n            root: 'Zip error -',\n            key: '{{!label}} ',\n            string: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              regex: {\n                base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              },\n            },\n            any: {\n              required: new ErrorBadRequest(this.messages.noRequiredParameter)\n            }\n          }\n        }),\n      countryCode: Joi.string()\n        .regex(/^[a-zA-Z]{2}$/i)\n        .options({\n          language: {\n            root: 'countryCode error -',\n            key: '{{!label}} ',\n            string: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              regex: {\n                base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              },\n            }\n          }\n        }),\n    });\n\n    Joi.validate(\n      params,\n      schema,\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const requestString = !!params.countryCode\n      ? `${this.url}cities/by-zip/${params.zip}/${params.countryCode}`\n      : `${this.url}cities/by-zip/${params.zip}`;\n    const response = await this.request(requestString, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description Cities - Get cities by zip codes\n   * @memberof UsersService\n   * @method getCitiesByZipCodes\n   * @async\n   * @public\n   * @param {array} zips - Zip codes.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getCitiesByZipCodes([\"54000\"]);\n   * })();\n   * @returns {Promise.<cityInfo>}\n   */\n  getCitiesByZipCodes = async (arrayZips = []) => {\n    Joi.validate(\n      arrayZips,\n      Joi.array()\n        .required()\n        .min(1)\n        .options({\n          language: {\n            root: 'Zips error -',\n            key: '{{!label}} ',\n            array: {\n              base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n            },\n            any: {\n              required: new ErrorBadRequest(this.messages.noRequiredParameter)\n            }\n          }\n        }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const params = {};\n    arrayZips.forEach((item, index) => {\n      params[`zips[${index}]`] = item;\n    });\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const response = await this.request(`${this.url}cities/by-zips`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description Cities - Get city by ip address\n   * @memberof UsersService\n   * @method getCityByIpAddress\n   * @async\n   * @public\n   * @param {String} ip - IP address.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getCityByIpAddress('192.168.2.59');\n   * })();\n   * @returns {Promise.<cityInfo>}\n   */\n  getCityByIpAddress = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        ip: Joi.string()\n          .options({\n            language: {\n              root: 'Ip error -',\n              key: '{{!label}} ',\n              string: {\n                base: new ErrorBadRequest(this.messages.incorrectRequestParameter),\n              },\n            }\n          }),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const requestString = !!params.ip\n      ? `${this.url}cities/by-ip/${params.ip}`\n      : `${this.url}cities/by-ip`;\n    const response = await this.request(requestString, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  // Countries\n\n  /**\n   * @description Countries - Get list of countries\n   * @memberof UsersService\n   * @method getListOfCountries\n   * @async\n   * @public\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getListOfCountries();\n   * })();\n   * @returns {Promise.<countriesInfo>}\n   */\n  getListOfCountries = async (params = {}) => {\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const response = await this.request(`${this.url}countries`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  // SegmentOptions\n\n  /**\n   * @description SegmentOptions - Get list of segment options\n   * @memberof UsersService\n   * @method getListOfSegmentOptions\n   * @async\n   * @public\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getListOfSegmentOptions();\n   * })();\n   * @returns {Promise.<segmentOptionsInfo>}\n   */\n  getListOfSegmentOptions = async (params = {}) => {\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const response = await this.request(`${this.url}segment-options`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  // Segments\n\n  /**\n   * @description Segments - Get list of segments\n   * @memberof UsersService\n   * @method getListOfSegments\n   * @async\n   * @public\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getListOfSegments();\n   * })();\n   * @returns {Promise.<segmentOptionsInfo>}\n   */\n  getListOfSegments = async (params = {}) => {\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const response = await this.request(`${this.url}segments`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  // StateProvinces\n\n  /**\n   * @description StateProvinces - Get list of state provinces\n   * @memberof UsersService\n   * @method getListOfStateProvinces\n   * @async\n   * @public\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getListOfStateProvinces();\n   * })();\n   * @returns {Promise.<segmentOptionsInfo>}\n   */\n  getListOfStateProvinces = async (params = {}) => {\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const response = await this.request(`${this.url}state-provinces`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  // User\n\n  /**\n   * @description User - Add new user\n   * @memberof UsersService\n   * @method addNewUser\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.login - User login\n   * @param {String} params.password - User password\n   * @param {Boolean} params.subscription - Subscribe user to newsletter\n   * @param {String} params.locale - 2 char locale (if not specified default 'en' will be used)\n   * @param {String} params.country - Country code (2 chars)\n   * @param {String} params.state - State code (2 chars)\n   * @param {Number} params.segmentoptionId - Subscription segment option (if not specified default 4 will be used)\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.addNewUser({\n   *     login: 'qweqwe@qwe.qwe',\n   *     password: 'qweqwe',\n   *     segmentoption_id: 4\n   *   });\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  addNewUser = async (params = {}) => {\n    const schema = Joi.object().keys({\n      login: Joi.string()\n        .max(72)\n        .regex(/^.{1,64}@.{1,255}$/)\n        .regex(\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        )\n        .required(),\n      password: Joi.string(),\n      subscription: Joi.boolean(),\n      locale: Joi.string(),\n      country: Joi.string().regex(/^[A-Z]{2}$/i),\n      state: Joi.string().regex(/^[A-Z]{2}$/i),\n      segmentOptionId: Joi.number().integer(),\n    });\n\n    Joi.validate(\n      params,\n      schema,\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n    if(!params.locale) {\n      data.locale = 'en';\n    }\n    if(params.segmentOptionId) {\n      data.segmentoption_id = params.segmentOptionId;\n    } else {\n      data.segmentoption_id = 4;\n    }\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...data\n      }),\n    };\n\n    const response = await this.request(`${this.url}users`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Confirm email\n   * @memberof UsersService\n   * @method confirmEmail\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.token - User confirm email token.\n   * @param {String} params.scope - List of oauth scopes divided by space (optional).\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.confirmEmail(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  confirmEmail = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        token: Joi.string().required(),\n        scope: Joi.string(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n       ...params,\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/confirm-email/${params.token}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Get link for avatar upload\n   * @memberof UsersService\n   * @method getLinkForAvatarUpload\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.file - Avatar file name.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.getLinkForAvatarUpload(params);\n   * })();\n   * @returns {Promise.<imageLink>}\n   */\n  getLinkForAvatarUpload = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        file: Joi.string().required(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params\n      },\n    };\n\n    const response = await this.request(`${this.url}users/avatar/link`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Get list of users\n   * @memberof UsersService\n   * @method getListOfUsers\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.page - Page number.\n   * @param {Number} params.perPage\t - Number of users in one page.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.getListOfUsers(params);\n   * })();\n   * @returns {Promise.<imageLink>}\n   */\n  getListOfUsers = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        page: Joi.number().integer(),\n        perPage: Joi.number().integer(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n\n    if(params.perPage) {\n      data['per-page'] = params.perPage;\n    }\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...data,\n      },\n    };\n\n    const response = await this.request(`${this.url}users`, options);\n\n    if (response.ok) {\n      const users = await response.json();\n      const responseHeaders = response.headers;\n      const headers = {\n        totalCount: responseHeaders.has('X-Pagination-Total-Count')\n          ? responseHeaders.get('X-Pagination-Total-Count')\n          : \"0\",\n        pageCount: responseHeaders.has('X-Pagination-Page-Count')\n          ? responseHeaders.get('X-Pagination-Page-Count')\n          : \"0\",\n        currentPage: responseHeaders.has('X-Pagination-Current-Page')\n          ? responseHeaders.get('X-Pagination-Current-Page')\n          : \"1\",\n        perPage: responseHeaders.has('X-Pagination-Per-Page')\n          ? responseHeaders.get('X-Pagination-Per-Page')\n          : \"1\",\n      };\n      return { headers, users };\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Get pagination metadata for Users {get} /users api call\n   * @memberof UsersService\n   * @method getPaginationMetadata\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.id - users AuthClient unique ID.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.getPaginationMetadata();\n   * })();\n   * @returns {Promise.<paginationData>}\n   */\n  getPaginationMetadata = async (params = {}) => {\n    const options = {\n      method: 'HEAD',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n      }),\n    };\n\n    const response = await this.request(`${this.url}users`, options);\n\n    if (response.ok) {\n      const responseHeaders = response.headers;\n      const headers = {\n        totalCount: responseHeaders.has('X-Pagination-Total-Count')\n          ? responseHeaders.get('X-Pagination-Total-Count')\n          : \"0\",\n        pageCount: responseHeaders.has('X-Pagination-Page-Count')\n          ? responseHeaders.get('X-Pagination-Page-Count')\n          : \"0\",\n        currentPage: responseHeaders.has('X-Pagination-Current-Page')\n          ? responseHeaders.get('X-Pagination-Current-Page')\n          : \"1\",\n        perPage: responseHeaders.has('X-Pagination-Per-Page')\n          ? responseHeaders.get('X-Pagination-Per-Page')\n          : \"1\",\n      };\n\n      return headers;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Get segment option for user identified by access token\n   * @memberof UsersService\n   * @method getSegmentOptionForUserByToken\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.segmentId - Segment ID.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.getSegmentOptionForUserByToken(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  getSegmentOptionByToken = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        segmentId: Joi.number().integer().required(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params,\n      },\n    };\n\n    const response = await this.request(`${this.url}users/segment-option/${params.segmentId}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Get segment option for user identified by user id\n   * @memberof UsersService\n   * @method getSegmentOptionByUserId\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.userId - User ID.\n   * @param {Number} params.segmentId - Segment ID.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.getSegmentOptionByUserId(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  getSegmentOptionByUserId = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        userId: Joi.number().integer().required(),\n        segmentId: Joi.number().integer().required(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params,\n        user_id: params.userId,\n        segment_id: params.segmentId,\n      },\n    };\n\n    const response = await this.request(`${this.url}users/user-segment-option/${params.userId}/${params.segmentId}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Issue access token using refresh token\n   * @memberof UsersService\n   * @method refreshToken\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.refreshToken - Refresh token.\n   * @param {String} params.scope - Set of scopes divided by space symbol.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.refreshToken(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  refreshToken = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        refreshToken: Joi.string().required(),\n        scope: Joi.string(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/refresh-token/${params.refreshToken}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Issue access token\n   * @method loginProfile\n   * @async\n   * @public\n   * @memberof UsersService\n   * @param  {object} params\n   * @param  {string} params.login - user email\n   * @param  {string} params.password - user password\n   * @param  {string} params.scope - user scopes\n   * @return {object} - User token information\n   * @example <caption>Request Issue access token</caption>\n   * (async () => {\n   *   const users = new UsersService('//api.templatemonsterdev.com/users/v1/');\n   *   const tokenInfo = await users.loginProfile({\n   *    login: 'test@test.com',\n   *    password: '123123',\n   *    scope: 'memberships,services'\n   *   });\n   * })();\n   */\n  loginProfile = async (params) => {\n    const schema = Joi.object().keys({\n      login: Joi.string()\n        .max(72)\n        .regex(/^.{1,64}@.{1,255}$/)\n        .regex(\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        )\n        .required(),\n      password: Joi.string().required(),\n      scope: Joi.string().required(),\n    });\n    Joi.validate(params, schema, error => {\n      if (error) {\n        throw new ErrorBadRequest(error.message);\n      }\n    });\n    const requestUrl = `${this.url}users/login`;\n    const response = await super.request(requestUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n      }),\n    });\n    if (response.ok) {\n      const json = await response.json();\n      return UsersService.updateURL(json);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Modify authorized user information\n   * @memberof UsersService\n   * @method modifyAuthorizedUserInformation\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.password - User password.\n   * @param {String} params.firstname - User first name.\n   * @param {String} params.lastname - User last name.\n   * @param {String} params.phone - User phone.\n   * @param {String} params.avatar - User avatar.\n   * @param {Array} params.billingInfo - Billing info array with following fields [firstname, lastname, city, email, postalcode, billingphone, country, state, contactphone, address]\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.modifyAuthorizedUserInformation(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  modifyAuthorizedUserInformation = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    const schema = Joi.object().keys({\n      password: Joi.string(),\n      firstname: Joi.string(),\n      lastname: Joi.string(),\n      phone: Joi.string(),\n      avatar: Joi.string(),\n      billingInfo: Joi.array(),\n    });\n\n    Joi.validate(\n      params,\n      schema,\n      error => {\n      if (error) {\n        throw new ErrorBadRequest(error.message);\n      }\n    });\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/profile`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Modify user information by user id\n   * @memberof UsersService\n   * @method modifyUserInformationByUserId\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.userId - User unique ID.\n   * @param {String} params.firstname - User first name.\n   * @param {String} params.lastname - User last name.\n   * @param {String} params.phone - User phone.\n   * @param {Number} params.stateId - User status ID: 1 - Waiting, 2 - Normal, 3 - Disabled, 4 - Without confirm, 5 - With confirm, 6 - Required confirm\n   * @param {Array} params.billingInfo - Billing info array with following fields [firstname, lastname, city, email, postalcode, billingphone, country, state, contactphone, address]\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.modifyUserInformationByUserId(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  modifyUserInformationByUserId = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    const schema = Joi.object().keys({\n      userId: Joi.number().integer().required(),\n      firstname: Joi.string(),\n      lastname: Joi.string(),\n      phone: Joi.string(),\n      stateId: Joi.number().integer(),\n      billingInfo: Joi.array(),\n    });\n\n    Joi.validate(\n      params,\n      schema,\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      });\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n        state_id: params.stateId,\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/${params.userId}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Register confirmed user\n   * @memberof UsersService\n   * @method registerConfirmedUser\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.login - User login.\n   * @param {String} params.password - User password.\n   * @param {String} params.country - 2 symbol code of country\n   * @param {String} params.state - 2 symbol code of state (XX if there are no states in this country)\n   * @param {String} params.firstname\n   * @param {String} params.lastname\n   * @param {Number} params.birthday\n   * @param {String} params.phone\n   * @param {String} params.website\n   * @param {String} params.company\n   * @param {String} params.avatar\n   * @param {Number} params.sex\n   * @param {String} params.expand - List of additional data to be returned, may contain following fields divided by comma - billingInfo, segmentOptions, token(this will create new access token), optional.\n   * @param {Boolean} params.sendEmail - Flag that indicates if registration email should be sent, optional.\n   * @param {Number} params.segmentOptionId - Id of segment option, optional.\n   * @param {String} params.scope - List of oauth scopes divided by space.\n   * @param {Array} params.billingInfo - User billing info, optional.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.registerConfirmedUser(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  registerConfirmedUser = async (params = {}) => {\n    const schema = Joi.object().keys({\n      login: Joi.string().required(),\n      password: Joi.string().required(),\n      country: Joi.string().regex(/^[A-Z]{2}$/i),\n      state: Joi.string().regex(/^[A-Z]{2}$/i),\n      firstname: Joi.string(),\n      lastname: Joi.string(),\n      birthday: Joi.number(),\n      phone: Joi.string(),\n      website: Joi.string(),\n      company: Joi.string(),\n      avatar: Joi.string(),\n      sex: Joi.number(),\n      expand: Joi.string(),\n      sendEmail: Joi.boolean(),\n      segmentOptionId: Joi.number(),\n      scope: Joi.string(),\n      billingInfo: Joi.array()\n    });\n\n    Joi.validate(\n      params,\n      schema,\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      });\n\n    const data = {...params};\n    if(params.segmentOptionId) {\n      data.segmentoption_id = params.segmentOptionId;\n    }\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...data\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/register-confirmed`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Request User email exist information\n   * @memberof UsersService\n   * @method requestUserEmailExistInformation\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.email - User email. (required)\n   * @param {String} params.expand - List of additional data to be returned (e.g. authClients) (optional).\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.requestUserEmailExistInformation(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  requestUserEmailExistInformation = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        email: Joi.string()\n          .max(72)\n          .regex(/^.{1,64}@.{1,255}$/)\n          .regex(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          )\n          .required(),\n        expand: Joi.string()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params,\n      },\n    };\n\n    const response = await this.request(`${this.url}users/lookup/${params.email}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Request User information by user id\n   * @memberof UsersService\n   * @method requestUserInformationByUserId\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.userId - User unique ID.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.requestUserInformationByUserId(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  requestUserInformationByUserId = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        userId: Joi.number().integer().required(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params,\n      },\n    };\n\n    const response = await this.request(`${this.url}users/${params.userId}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Request change email\n   * @memberof UsersService\n   * @method requestChangeEmail\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.email - User email.\n   * @param {String} params.locale - email language. (optional, 'en' by default)\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.requestChangeEmail(params);\n   * })();\n   * @returns {Boolean}\n   */\n  requestChangeEmail = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        email: Joi.string()\n          .max(72)\n          .regex(/^.{1,64}@.{1,255}$/)\n          .regex(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          )\n          .required(),\n        locale: Joi.string()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n    if(!params.locale) {\n      data.locale = 'en';\n    }\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...data\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/request-change-email`, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Request change password email\n   * @memberof UsersService\n   * @method requestChangePasswordEmail\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.email - User email.\n   * @param {String} params.password - New password to set.\n   * @param {String} params.locale - email language. (optional, 'en' by default)\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.requestChangePasswordEmail(params);\n   * })();\n   * @returns {Boolean}\n   */\n  requestChangePasswordEmail = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        email: Joi.string()\n          .max(72)\n          .regex(/^.{1,64}@.{1,255}$/)\n          .regex(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          )\n          .required(),\n        password: Joi.string().required(),\n        locale: Joi.string()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n    if(!params.locale) {\n      data.locale = 'en';\n    }\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...data\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/request-change-password/${params.email}`, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Request for password reset email\n   * @memberof UsersService\n   * @method requestForPasswordResetEmail\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.email - User email.\n   * @param {String} params.locale - email language. (optional, 'en' by default)\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.requestForPasswordResetEmail(params);\n   * })();\n   * @returns {Boolean}\n   */\n  requestForPasswordResetEmail = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        email: Joi.string()\n          .max(72)\n          .regex(/^.{1,64}@.{1,255}$/)\n          .regex(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          )\n          .required(),\n        locale: Joi.string()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n    if(!params.locale) {\n      data.locale = 'en';\n    }\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...data\n      },\n    };\n\n    const response = await this.request(`${this.url}users/request-reset-password/${params.email}`, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Request for registration email\n   * @memberof UsersService\n   * @method requestForRegistrationEmail\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.email - User email.\n   * @param {String} params.locale - email language. (optional, 'en' by default)\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.requestForRegistrationEmail(params);\n   * })();\n   * @returns {Boolean}\n   */\n  requestForRegistrationEmail = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        email: Joi.string()\n          .max(72)\n          .regex(/^.{1,64}@.{1,255}$/)\n          .regex(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n          )\n          .required(),\n        locale: Joi.string()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n    if(!params.locale) {\n      data.locale = 'en';\n    }\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...data\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/request-registration-email/${params.email}`, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Request public users information based on request params\n   * @memberof UsersService\n   * @method requestPublicUsersInformation\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.ids - search by few id divided by comma (e.g. ?ids=124088,123456)\n   * @param {String} params.login - search by e-mail address\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.requestPublicUsersInformation(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  requestPublicUsersInformation = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        ids: Joi.string(),\n        login: Joi.string(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params,\n      },\n    };\n\n    const response = await this.request(`${this.url}users/profiles`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Set new email to user using change email token\n   * @memberof UsersService\n   * @method setNewEmailUsingEmailToken\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.token - User change email token.\n   * @param {String} params.scope - List of oauth scopes divided by space.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.setNewEmailUsingEmailToken(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  setNewEmailUsingEmailToken = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        token: Joi.string().required(),\n        scope: Joi.string(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/change-email/${params.token}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Set new password to user using change password token\n   * @memberof UsersService\n   * @method setNewPasswordToUserUsingChangePasswordToken\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.token - User change email token.\n   * @param {String} params.scope - List of oauth scopes divided by space.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.setNewPasswordToUserUsingChangePasswordToken(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  setNewPasswordUsingPasswordToken = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        token: Joi.string().required(),\n        scope: Joi.string(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/change-password/${params.token}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Set new password to user using reset token\n   * @memberof UsersService\n   * @method setNewPasswordByResetToken\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.token - User change email token.\n   * @param {String} params.scope - List of oauth scopes divided by space.\n   * @param {String} params.password - List of oauth scopes divided by space.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.setNewPasswordByResetToken(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  setNewPasswordUsingResetToken = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        token: Joi.string().required(),\n        scope: Joi.string(),\n        password: Joi.string().required(),\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params,\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/reset-password/${params.token}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Set segment option for user identified by access token\n   * @memberof UsersService\n   * @method setSegmentOptionByToken\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.segmentOptionId - Segment option ID.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/, token');\n   *   const request = await service.setSegmentOptionByToken(params);\n   * })();\n   * @returns {Boolean}\n   */\n  setSegmentOptionByToken = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        segmentOptionId: Joi.number().integer().required()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/segment-option/${params.segmentOptionId}`, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Set segment option for user identified by user id\n   * @memberof UsersService\n   * @method setSegmentOptionByUserId\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.userId - User ID.\n   * @param {Number} params.segmentOptionId - Segment option ID.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/, token');\n   *   const request = await service.setSegmentOptionByUserId(params);\n   * })();\n   * @returns {Boolean}\n   */\n  setSegmentOptionByUserId = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        userId: Joi.number().integer().required(),\n        segmentOptionId: Joi.number().integer().required()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...params\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/user-segment-option/${params.userId}/${params.segmentOptionId}`, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Signin or signup via external auth client\n   * @memberof UsersService\n   * @method signinSignupViaAuthClient\n   * @async\n   * @public\n   * @param {object} params\n   * @param {String} params.clientName - Name of external auth client - facebook, google, etc..\n   * @param {String} params.token - OAuth access token from external auth provider.\n   * @param {String} params.scope - List of oauth scopes divided by space.\n   * @param {Number} params.segmentOptionId - Segment option id.\n   * @param {Boolean} params.subscription - Subscribe user to newsletter.\n   * @param {String} params.locale - Subscription locale (if not specified default 'en' will be used).\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/');\n   *   const request = await service.signinSignupViaAuthClient(params);\n   * })();\n   * @returns {Promise.<userInfo>}\n   */\n  signinSignupViaAuthClient = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        clientName: Joi.string().required(),\n        token: Joi.string().required(),\n        scope: Joi.string(),\n        segmentOptionId: Joi.number().integer(),\n        subscription: Joi.boolean(),\n        locale: Joi.string()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n    if(params.segmentOptionId) {\n      data.segmentoption_id = params.segmentOptionId;\n    }\n    if(!params.locale) {\n      data.locale = 'en';\n    }\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...data,\n        access_token: params.token\n      }),\n    };\n\n    const response = await this.request(`${this.url}users/auth-client/${params.clientName}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * @description User - Subscribe user to newsletters\n   * @memberof UsersService\n   * @method subscribeUserToNewsletters\n   * @async\n   * @public\n   * @param {object} params\n   * @param {Number} params.segmentOptionId - Segment option ID.\n   * @param {Number} params.locale - Locale.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/, token');\n   *   const request = await service.subscribeUserToNewsletters(params);\n   * })();\n   * @returns {Boolean}\n   */\n  subscribeUserToNewsletters = async (params = {}) => {\n    Joi.validate(\n      this.token,\n      Joi.string().required(),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(this.messages.tokenIsNotDefined);\n        }\n      }\n    );\n\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        segmentOptionId: Joi.number().integer().required(),\n        locale: Joi.string()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const data = {...params};\n    if(!params.locale) {\n      data.locale = 'en';\n    }\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: urlencode.stringify({\n        ...data,\n      }),\n    };\n\n    const requestString = !!params.locale\n      ? `${this.url}users/subscribe/${params.segmentOptionId}/${params.locale}`\n      : `${this.url}users/subscribe/${params.segmentOptionId}/en`;\n    const response = await this.request(requestString, options);\n\n    if (response.ok) {\n      return true;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  // UserToken\n\n  /**\n   * @description UserToken - Request User Token information\n   * @memberof UsersService\n   * @method requestUserTokenInformation\n   * @async\n   * @public\n   * @param {Object} params\n   * @param {number} params.token - User token string.\n   * @example\n   * (async () => {\n   *   const service = new Service('//api.templatemonsterdev.com/users/v1/', token);\n   *   const request = await service.requestUserTokenInformation(params);\n   * })();\n   * @returns {Promise.<listOfUsers>}\n   */\n  requestUserTokenInformation = async (params = {}) => {\n    Joi.validate(\n      params,\n      Joi.object().keys({\n        token: Joi.string().required()\n      }),\n      error => {\n        if (error) {\n          throw new ErrorBadRequest(error.message);\n        }\n      },\n    );\n\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      data: {\n        ...params,\n      },\n    };\n\n    const response = await this.request(`${this.url}user-tokens/${params.token}`, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n    if (response.status === 400) {\n      throw new ErrorBadRequest(this.messages.badRequest);\n    }\n    if (response.status === 404) {\n      throw new ErrorNotFound(this.messages.notFound);\n    }\n    throw new ErrorServerResponse(response.status, response.statusText);\n  };\n\n  /**\n   * user object\n   *\n   * @namespace UsersService\n   * @typedef {user} user representation\n   *\n   * @property {string} userName - full name\n   * @property {string} avatar - avatar url\n   * @property {string} background - background color\n   */\n}\n"]}