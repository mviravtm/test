{"version":3,"sources":["../source/ErrorBadRequest.js"],"names":["ErrorBadRequest","message","name","statusCode","statusText","Error","captureStackTrace","stack"],"mappings":"o2BAOqBA,gB,kBAQnB,0BAA4B,IAAhBC,QAAgB,wDAAN,IAAM,+JACpBA,OADoB,SAE1B,OAAKC,IAAL,CAAY,aAFc,CAG1B,MAAKC,UAAL,CAAkB,GAHQ,CAI1B,MAAKC,UAAL,CAAkB,aAJQ,CAK1B,MAAKH,OAAL,CAAeA,OALW,CAMtBI,MAAMC,iBANgB,CAOxBD,MAAMC,iBAAN,OAA8BN,eAA9B,CAPwB,CASxB,MAAKO,KAAL,CAAa,GAAIF,MAAJ,GAAYE,KATD,MAW3B,C,0DAnB0CF,K,kBAAxBL,e","file":"ErrorBadRequest.js","sourcesContent":["/**\n * Custom error message for Bad Request server response\n *\n * @namespace ErrorBadRequest\n * @class\n * @param {string | null} [message = null] - error details\n */\nexport default class ErrorBadRequest extends Error {\n  /**\n   * Constructor generates errorinstance\n   * @memberof ErrorBadRequest\n   * @constructor\n   * @param {string | null} [message = null] - error details\n   * @return {ErrorBadRequest} - current instance\n   */\n  constructor(message = null) {\n    super(message);\n    this.name = 'Bad Request';\n    this.statusCode = 400;\n    this.statusText = 'Bad Request';\n    this.message = message;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorBadRequest);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n}\n"]}