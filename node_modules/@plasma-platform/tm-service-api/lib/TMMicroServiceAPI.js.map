{"version":3,"sources":["../source/TMMicroServiceAPI.js"],"names":["TMMicroServiceAPI","url","token","cache","env","TM_CACHE_CONFIG","log","cacheConfig","process","JSON","parse","enabled","error","Memcached","require","uri","TM_CACHE_SERVER","memcached","tmpVersion","match","version","checkVersion","slice","setToken","request","response","modified","ok","type","status","statusText","redirected","headers","_headers","raw","json","text","trim","length","key","value","ttl","Promise","resolve","reject","set","get","data","userOptions","messages","badRequest","requestStart","requestEnd","hrtime","updatedUrl","replace","Accept","Authorization","defaultOptions","method","options","encodedData","stringify","getFromMemcached","parseResponse","serializeResponse","clone","serialized","setToMemcached","parseInt","console","test","Error","header","name","toLowerCase","has","hasOwnProperty","getAll","setVersion"],"mappings":"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","file":"TMMicroServiceAPI.js","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport urlencode from 'urlencode';\nimport md5 from 'js-md5';\nimport ErrorBadRequest from './ErrorBadRequest';\nimport ErrorCache from './ErrorCache';\n\n/**\n * TM Micro Service Proto API\n *\n * @namespace TMMicroServiceAPI\n * @class\n * @param {string} url - service url\n * @param {string | null} [token = null] - user access tocken if available\n */\nexport default class TMMicroServiceAPI {\n  /**\n   * Constructor saves service url\n   * @memberof TMMicroServiceAPI\n   * @constructor\n   * @param {string} url - service url\n   * @param {string} [version = 'v1'] - service version\n   * @param {string | null} [token = null] - user access tocken if available\n   * @return {TMMicroServiceAPI} - current instance\n   */\n  constructor(url, token = null) {\n    /**\n    * Service URL\n    * @property {string} service url\n    */\n    this.url = url;\n\n    /**\n    * User access token\n    * @property {string | null} [token = null] - user access tocken if available\n    */\n    this.token = token;\n\n    this.cache =\n      process !== undefined &&\n      process.env !== undefined &&\n      process.env.TM_CACHE_CONFIG !== undefined;\n\n    this.log = false;\n\n    if (this.cache === true) {\n      try {\n        this.cacheConfig = typeof process.env.TM_CACHE_CONFIG === 'string' ? JSON.parse(process.env.TM_CACHE_CONFIG) : process.env.TM_CACHE_CONFIG;\n        this.log = this.cacheConfig.log;\n        if (\n          this.cacheConfig[this.url] === undefined ||\n          this.cacheConfig[this.url].enabled === false\n        ) {\n          this.cache = false;\n        }\n      } catch(error) {} // eslint-disable-line\n    }\n\n    if (this.cache === true) {\n      const Memcached = require('memcached'); // eslint-disable-line\n      const uri = process.env.TM_CACHE_SERVER || '127.0.0.1:11211';\n      this.memcached = new Memcached(uri);\n    }\n\n    /**\n    * Service version\n    * @property {string} [version = 'v1'] - service version\n    */\n    const tmpVersion = this.url.match(/\\/v[\\d]+(.[\\d]+)?(.[\\d]+)?/);\n    this.version =\n      tmpVersion === null ? 'v1' : TMMicroServiceAPI.checkVersion(tmpVersion[0].slice(1));\n\n    this.setToken = ::this.setToken;\n    this.request = ::this.request;\n  }\n\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {\n    url: 'Wrong Service URL Format',\n    version: 'Wrong Version Format',\n    badRequest: 'Bad Request',\n  };\n\n  /**\n  * Set access token\n  *\n  * @public\n  * @method setToken\n  * @memberof TMMicroServiceAPI\n  * @param {string} token - access token\n  */\n  setToken = token => {\n    this.token = token;\n  };\n\n  /**\n  * Set service version\n  *\n  * @public\n  * @method setVersion\n  * @memberof TMMicroServiceAPI\n  * @param {string} version - service version\n  */\n  setVersion = version => {\n    this.version = TMMicroServiceAPI.checkVersion(version);\n  };\n\n\n  /**\n  * Validate service version\n  * @method checkVersion\n  * @memberof TMMicroServiceAPI\n  *\n  * @param  {string} version - service version\n  * @throws {Error} - if URL do not match format Error will be thrown\n  * @return {string} version - service version\n  */\n  static checkVersion(version) {\n    if (!/^v[\\d]+(.[\\d]+)?(.[\\d]+)?$/i.test(version))\n      throw new Error(TMMicroServiceAPI.messages.version);\n    return version;\n  }\n\n  /**\n   * We need to create simplified version of response ready for serialization\n   *\n   * @method serializeResponse\n   * @memberof TMMicroServiceAPI\n   * @private\n   * @async\n   *\n   * @param  {Response}  response - response from fetch\n   * @return {Promise}            - simplified response version for memcached\n   */\n  // eslint-disable-next-line\n  async serializeResponse(response) {\n    const modified = {\n      ok: response.ok,\n      url: response.url,\n      type: response.type,\n      status: response.status,\n      statusText: response.statusText,\n      redirected: response.redirected,\n      headers: {\n        _headers: response.headers.raw(),\n      },\n      json: null,\n      text: null,\n    };\n\n    let text = null;\n    try {\n      text = await response.text();\n    } catch (error) {} // eslint-disable-line\n\n    let json = null;\n    try {\n      if (text !== null && text.trim().length > 0) {\n        json = JSON.parse(text);\n      }\n    } catch (error) {} // eslint-disable-line\n\n    return {\n      ...modified,\n      text,\n      json,\n    };\n  }\n\n  /**\n   * Add methods to object\n   *\n   * @method parseResponse\n   * @memberof TMMicroServiceAPI\n   * @private\n   * @static\n   *\n   * @param  {object} response parsed object from memcached\n   * @return {object}          simplified copy of response\n   */\n  static parseResponse(response) {\n    const headers = {\n      ...response.headers,\n    };\n    headers.get = name => {\n      const header = headers._headers[name.toLowerCase()];\n      return header ? header[0] : null;\n    };\n    // eslint-disable-next-line\n    headers.has = name => headers._headers.hasOwnProperty(name.toLowerCase());\n    headers.raw = () => headers._headers;\n    headers.getAll = name => (headers.has(name) ? headers._headers[name.toLowerCase()] : []);\n    const json = () =>\n      new Promise(resolve => {\n        resolve(response.json);\n      });\n    const text = () =>\n      new Promise(resolve => {\n        resolve(response.text);\n      });\n    return {\n      ...response,\n      json,\n      text,\n      headers,\n    };\n  }\n\n\n  /**\n   * Add object to memcache\n   *\n   * @method setToMemcached\n   * @memberof TMMicroServiceAPI\n   * @private\n   *\n   * @param {string} key - mamcache key\n   * @param {mixed} value - value\n   * @param {number} ttl - second to store\n   */\n  setToMemcached(key, value, ttl) {\n    return new Promise((resolve, reject) => {\n      this.memcached.set(key, value, ttl, error => {\n        if (error) return reject(error);\n        return resolve();\n      });\n    });\n  }\n\n\n  /**\n   * Get data from memcache\n   *\n   * @method getFromMemcached\n   * @memberof TMMicroServiceAPI\n   * @private\n   *\n   * @param  {string} key - memcache key\n   * @return {Promise} - promise which will resolve with data from memcache\n   */\n  getFromMemcached(key) {\n    return new Promise((resolve, reject) => {\n      this.memcached.get(key, (error, data) => {\n        if (error || data === undefined) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  /**\n  * Fetch remote resource\n  *\n  * @method request\n  * @memberof TMMicroServiceAPI\n  *\n  * @static\n  * @param {string} url - resource url\n  * @param {Object} userOptions - user defined options\n  * @return {Promise} - Promise with server {@link https://developer.mozilla.org/docs/Web/API/Response|Response}\n  */\n  async request(url, userOptions) {\n    if (url === undefined) {\n      throw new ErrorBadRequest(400, TMMicroServiceAPI.messages.badRequest);\n    }\n    let requestStart;\n    let requestEnd;\n    if (this.log) requestStart = process.hrtime();\n\n    const updatedUrl = url.replace(/\\/v[\\d]+(.[\\d]+)?(.[\\d]+)?/i, `/${this.version}`);\n    let headers = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'application/json; charset=utf-8',\n    };\n    if (this.token !== null) {\n      headers = {\n        ...headers,\n        Authorization: this.token,\n      };\n    }\n    const defaultOptions = {\n      method: 'GET',\n      headers,\n      data: {},\n    };\n\n    const options = { ...defaultOptions, ...userOptions };\n    options.headers = { ...headers, ...options.headers };\n    const encodedData = urlencode.stringify(options.data);\n    const uri = encodedData.length === 0 ? updatedUrl : `${updatedUrl}?${encodedData}`;\n    const key = `${uri}---${md5(JSON.stringify(options))}`;\n\n    let response;\n\n    if (this.cache === true) {\n      try {\n        response = await this.getFromMemcached(key);\n        if (response !== undefined) {\n          return TMMicroServiceAPI.parseResponse(response);\n        }\n      } catch (error) {}  // eslint-disable-line\n    }\n    response = await fetch(uri, options);\n\n    if (this.cache === true && response.ok === true) {\n      try {\n        const serialized = await this.serializeResponse(response.clone());\n        await this.setToMemcached(key, serialized, parseInt(this.cacheConfig[this.url].ttl, 10));\n      } catch (error) {\n        throw new ErrorCache(error);\n      }\n    }\n\n    if (this.log) {\n      requestEnd = process.hrtime();\n      requestStart = parseInt(((requestStart[0] * 1e3) + (requestStart[1]) * 1e-6), 10);\n      requestEnd = parseInt(((requestEnd[0] * 1e3) + (requestEnd[1]) * 1e-6), 10);\n\n      console.log(`\n        Запрос: ${options.method === undefined ? 'GET' : options.method} ${uri}\n        Время получения данных: ${requestEnd - requestStart} мс.\n      `);\n    }\n\n    return response;\n  }\n}\n"]}