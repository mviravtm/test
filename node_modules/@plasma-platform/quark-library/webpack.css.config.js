const webpack = require('webpack');
const UglifyJSPlugin = require('uglifyjs-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const SpriteLoaderPlugin = require('svg-sprite-loader/plugin');
const StyleLintPlugin = require('stylelint-webpack-plugin');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
const path = require('path');
const glob = require('glob');

const Config = {
  target: 'web',
  mode: (process.env.NODE_ENV === 'production') ? 'production' : 'development',
  entry: {
    styles: './src/components/index.js',
  },
  output: {
    filename: '[name].js',
    path: path.resolve('./lib'),
    library: '[name]',
    libraryTarget: 'umd',
  },
  resolve: {
    extensions: ['.js', '.jsx'],
    alias: {
      Utils: path.resolve(__dirname, 'src/utils'),
      Components: path.resolve(__dirname, 'src/components/'),
      Images: path.resolve(__dirname, 'src/assets/images/'),
      Icons: path.resolve(__dirname, 'src/assets/icons/'),
      Styles: path.resolve(__dirname, 'src/assets/styles/'),
    },
  },
  plugins: [
    new BundleAnalyzerPlugin({
      openAnalyzer: true,
      analyzerMode: 'enabled',
    }),
    new SpriteLoaderPlugin({
      spriteAttrs: {
        id: 'quark-lib-svg-sprite',
    }}),
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify('production'),
      },
    }),
    new StyleLintPlugin({
      configFile: '.stylelintrc',
      syntax: 'scss',
    }),
    new MiniCssExtractPlugin({
      filename: '[name].css',
      chunkFilename: '[name]-[id].[hash].css',
    }),
  ],
  module: {
    rules: [
      {
        test: /\/icons\/.*\.svg$/,
        loaders: [
          {
            loader: 'svg-sprite-loader',
            options: {
              extract: true,
              spriteFilename: svgPath => `sprite${svgPath.substr(-4)}`
            }
          },
          {
            loader: 'svgo-loader',
            options: {
              plugins: [
                { cleanupIDs: false },
                { cleanupAttrs: false },
                { convertStyleToAttrs: false },
                { removeUnknownsAndDefaults: false },
                { removeUselessStrokeAndFill: false },
                { removeStyleElement: false },
                { removeDoctype: true },
                { removeXMLProcInst: true },
                { removeComments: true },
                { removeMetadata: true },
                { removeTitle: true },
                { removeDesc: true },
              ],
            },
          },
        ],
      }, {
        test: /\/monoicons\/.*\.svg$/,
        loaders: [
          {
            loader: 'svg-sprite-loader',
            options: {
              extract: true,
              spriteFilename: svgPath => `sprite${svgPath.substr(-4)}`
            }
          },
          {
            loader: 'svgo-loader',
            options: {
              plugins: [
                { cleanupIDs: true },
                { cleanupAttrs: true },
                { removeDoctype: true },
                { removeXMLProcInst: true },
                { removeComments: true },
                { removeMetadata: true },
                { removeTitle: true },
                { removeDesc: true },
                { removeAttrs: { attrs: '(desc|fill|stroke|fill-opacity|stroke-opacity)' } },
                { removeUselessDefs: true },
                { removeXMLNS: true },
                { removeEditorsNSData: true },
                { removeEmptyAttrs: true },
                { removeHiddenElems: true },
                { removeEmptyText: true },
                { removeEmptyContainers: true },
                { cleanupEnableBackground: true },
                { convertStyleToAttrs: false },
                { convertColors: true },
                { convertTransform: true },
                { removeUnknownsAndDefaults: true },
                { removeNonInheritableGroupAttrs: true },
                { removeUselessStrokeAndFill: true },
                { removeUnusedNS: true },
                { cleanupNumericValues: true },
                { cleanupListOfValues: true },
                { moveGroupAttrsToElems: true },
                { collapseGroups: true },
                { removeRasterImages: true },
                { mergePaths: true },
                { removeDimensions: true },
                { removeStyleElement: false },
              ],
            },
          },
        ],
      }, {
        test: /\/background\/.*\.svg$/,
        use: 'file-loader',
      }, {
        test: /\/images\/.*\.svg$/,
        use: 'file-loader',
        exclude: /\/assets\/images\/.*\.svg$/,
      }, {
        test: /\.json$/,
        use: 'json-loader',
        exclude: /node_modules/,
      }, {
        test: /\.pcss$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              modules: true,
              importLoaders: 1,
              localIdentName: '[local]~~~~[hash:base64:24]',
            },
          },
          'postcss-loader',
        ],
      }, {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              modules: true,
              importLoaders: 1,
              localIdentName: '[local]~~~~[hash:base64:24]',
            },
          },
        ],
      }, {
        test: /\.jsx?$/,
        use: 'babel-loader',
        exclude: /node_modules/,
      }, {
        test: /\.pug$/,
        use: 'pug-loader',
        exclude: /node_modules/,
      },
      {
        test: /\.(svg|png)$/,
        include: /\/assets\/images\/.*$/,
        use: 'url-loader',
      },
    ],
  },
};

if (process.env.NODE_ENV === 'production') {
  Config.plugins.push(new UglifyJSPlugin({
    parallel: true,
    exclude: 'node_modules',
    cache: true,
    sourceMap: false,
  }));
}

module.exports = Config;
