import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Icon from '../Icon';
import style from './Tag.pcss';

/**
 * Class represent all kinds of tags
 * @class
 */
class TAG extends Component {
  /**
   * Object that contains expected props and their types
   * and used for props validationxs
   * @static
   * @type {Object}
   */
  static propTypes = {
    label: PropTypes.string.isRequired,
    from: PropTypes.number,
    className: PropTypes.string,
    interactable: PropTypes.bool,
    removable: PropTypes.bool,
    disabled: PropTypes.bool,
    large: PropTypes.bool,
    loading: PropTypes.bool,
    onClick: PropTypes.func,
  };

  /**
   * Object containing default props value
   * @static
   * @type {Object}
   */
  static defaultProps = {
    from: null,
    className: '',
    interactable: false,
    removable: false,
    disabled: false,
    large: false,
    onClick: null,
    loading: false,
  };

  /**
   * Calculate tag level
   * @param  {number} label currnt value
   * @param  {number} from  maximum
   * @return {string}       tag level
   */
  static level(label, from) {
    if (label === null) return 'none';
    if (label >= 0.75 * from) {
      return 'heigh';
    } else if (label >= 0.5 * from) {
      return 'normal';
    } else if (label >= 0.25 * from) {
      return 'medium';
    } else if (label > 0 * from) {
      return 'low';
    }
    return 'none';
  }

  /**
   * [render description]
   * @return {ReactComponent} return rendered component
   */
  render() {
    const {
      interactable,
      removable,
      from,
      label,
      disabled,
      large,
      className,
      loading,
      onClick,
    } = this.props;
    const Wrapper = interactable ? 'button' : 'section';
    const From = from && !(interactable || removable) ?
      (<b className={style.Tag__From}>/{ from }</b>)
      : null;
    return (
      <Wrapper
        className={`
          ${loading ? ` ${style['Tag--loading']}` : ''}
          ${style.Tag}${large ? ` ${style['Tag--large']}` : ''}
          ${from && !(interactable || removable) ? ` ${style['Tag--from']} ${style[`Tag--${TAG.level(parseFloat(label), parseFloat(from))}`]}` : ''}
          ${className ? ` ${className}` : ''}
          ${interactable && removable ? ` ${style['Tag--removable']}` : ''}
        `}
        {...(onClick === null) ? {} : { onClick }}
        {...interactable ? { type: 'button' } : {}}
        disabled={interactable && disabled}
      >
        {label}{From}{interactable && removable ? <Icon
          className={style.Tag__Icon}
          icon="cross"
          width={10}
          height={10}
          viewBox="0 0 10 10"
        /> : null}
      </Wrapper>
    );
  }
}

export default TAG;
